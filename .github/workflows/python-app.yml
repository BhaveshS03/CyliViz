# This workflow installs Python dependencies, runs tests, and creates an executable

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  PYTHON_VER: '3.11'
  PYTHON_ARCH: 'x64'
  EXE_PATH: './dist'
  SPEC: 'main.py'
  REQUIREMENTS: 'requirements.txt'
  UPLOAD_EXE_WITH_NAME: 'CyliViz'

jobs:
  CyliViz-Build:
    runs-on: windows-latest
    steps:
      - name: (Install) Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VER }}
          architecture: ${{ env.PYTHON_ARCH }}
      
      - name: (Install) Python Dev Tools
        shell: bash
        run: python -m pip install --upgrade pip wheel setuptools
      
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: (Install) Dependencies
        if: env.REQUIREMENTS != ''
        run: python -m pip install -r "${{ env.REQUIREMENTS }}"
        shell: bash

      - name: (Install) PyInstaller
        shell: bash
        run: pip install pyinstaller
      
      - name: (Create) Executable
        shell: bash
        run: |
          pyinstaller \
            --clean \
            --distpath "${{ env.EXE_PATH }}" \
            --onefile \
            --name "CyliViz" \
            --windowed \
            "${{ env.SPEC }}"
          
          echo "✔️ Executable created successfully at _'${{ env.EXE_PATH }}'_" >> $GITHUB_STEP_SUMMARY
          echo "  - Python version used: '${{ env.PYTHON_VER }}'" >> $GITHUB_STEP_SUMMARY
          echo "  - Python architecture used: '${{ env.PYTHON_ARCH }}'" >> $GITHUB_STEP_SUMMARY

      - name: (Upload) Executable
        id: artifact_upload
        if: env.UPLOAD_EXE_WITH_NAME != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UPLOAD_EXE_WITH_NAME }}
          path: ${{ env.EXE_PATH }}
      
      - name: (Upload) Generated Spec File
        if: endsWith(env.SPEC, '.py')
        uses: actions/upload-artifact@v4
        with:
          name: Generated spec file
          path: main.spec  # Hardcoded since there's no `steps.mods.outputs.spec_name`

      - name: If Executable Upload Success
        id: exe_uploading
        if: steps.artifact_upload.conclusion == 'success'
        shell: bash
        run: |
          echo "✔️ Executable **_(${{ env.UPLOAD_EXE_WITH_NAME }})_** uploaded successfully" >> $GITHUB_STEP_SUMMARY
          echo "uploaded='true'" >> $GITHUB_OUTPUT
      
      - name: If Executable Upload Fails
        if: failure() && steps.artifact_upload.conclusion == 'failure'
        shell: bash
        run: |
          echo "::warning title=Failed-Upload::\
            Executable couldn't upload. \
            Check available storage at: 'settings > billing > Storage for Actions and Packages'."
